<!-- vim: syntax=markdown -->

# Advent of Code 2021-07

## Day 7: The Treachery of Whales

Problem Link: https://adventofcode.com/2021/day/7

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"},
  {:vega_lite, "~> 0.1.2"},
  {:nx, github: "elixir-nx/nx", sparse: "nx"}
])
```

```elixir
alias VegaLite, as: Vl
```

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
data =
  input
  |> Kino.Input.read()
  |> String.split([",", "\n"], trim: true)
  |> Enum.map(&String.to_integer/1)
```

```elixir
Vl.new(width: 400, height: 400)
|> Vl.data_from_series(x: 1..length(data), y: data)
|> Vl.mark(:point)
|> Vl.encode_field(:x, "x", type: :quantitative)
|> Vl.encode_field(:y, "y", type: :quantitative)
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
{min, max} = data |> Enum.min_max()

t =
  data
  |> Nx.tensor()
```

```elixir
possible_pos = {Enum.count(min..max), 1} |> Nx.iota() |> Nx.subtract(min)

distances = t |> Nx.subtract(possible_pos) |> Nx.abs()

distances |> Nx.sum(axes: [1]) |> Nx.reduce_min()
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
one = Nx.tensor(1)

distances
|> Nx.multiply(Nx.add(distances, 1))
|> Nx.right_shift(Nx.tensor(1))
|> Nx.sum(axes: [1])
|> Nx.reduce_min()
```
