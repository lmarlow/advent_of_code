<!-- vim: syntax=markdown -->

# Advent of Code 2024-03

```elixir
Mix.install([
  {:kino, "~> 0.7.0"},
  {:vega_lite, "~> 0.1.4"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:nx, github: "elixir-nx/nx", sparse: "nx"},
  {:advent_of_code, path: "Code/mine/advent_of_code/elixir"}
])

alias AdventOfCode.Y2024.Day03, as: Day
```

##  Day 3: Mull It Over

Problem Link: https://adventofcode.com/2024/day/3

[Previous Day](day_02.livemd)
[Next Day](day_04.livemd)

## Input Data

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
lines =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
```

## Part 1

"Our computers are having issues, so I have no idea if we have any Chief
Historians
<span title="There's a spot reserved for Chief Historians between the green toboggans and the red toboggans. They've never actually had any Chief Historians in stock, but it's best to be prepared.">in
stock</span>! You're welcome to check the warehouse, though," says the
mildly flustered shopkeeper at the [North Pole Toboggan Rental
Shop](/2020/day/2). The Historians head out to take a look.

The shopkeeper turns to you. "Any chance you can see why our computers
are having issues again?"

The computer appears to be trying to run a program, but its memory (your
puzzle input) is *corrupted*. All of the instructions have been jumbled
up!

It seems like the goal of the program is just to *multiply some
numbers*. It does that with instructions like `mul(X,Y)`, where `X` and
`Y` are each 1-3 digit numbers. For instance, `mul(44,46)` multiplies
`44` by `46` to get a result of `2024`. Similarly, `mul(123,4)` would
multiply `123` by `4`.

However, because the program's memory has been corrupted, there are also
many invalid characters that should be *ignored*, even if they look like
part of a `mul` instruction. Sequences like `mul(4*`, `mul(6,9!`,
`?(12,34)`, or `mul ( 2 , 4 )` do *nothing*.

For example, consider the following section of corrupted memory:

    xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))

Only the four highlighted sections are real `mul` instructions. Adding
up the result of each instruction produces *`161`*
(`2*4 + 5*5 + 11*8 + 8*5`).

Scan the corrupted memory for uncorrupted `mul` instructions. *What do
you get if you add up all of the results of the multiplications?*


<!-- livebook:{"reevaluate_automatically":true} -->

```elixir

```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir

```
