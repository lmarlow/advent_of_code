<!-- vim: syntax=markdown -->

# Advent of Code 2021-09

## Day 9: Smoke Basin

Problem Link: https://adventofcode.com/2021/day/9

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"},
  {:vega_lite, "~> 0.1.2"},
  {:nx, github: "elixir-nx/nx", sparse: "nx"}
])
```

```elixir
alias VegaLite, as: Vl
```

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
data =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)
  |> Enum.map(fn line -> String.to_charlist(line) |> Enum.map(&(&1 - ?0)) end)
  |> Nx.tensor()

defmodule THelper do
  def neighbors({y, x}, data) do
    {rows, cols} = Nx.shape(data)
    {maxy, maxx} = {rows - 1, cols - 1}

    for {dy, dx} <- [{0, 1}, {0, -1}, {1, 0}, {-1, 0}],
        (y + dy) in 0..maxy,
        (x + dx) in 0..maxx,
        do: {y + dy, x + dx}
  end

  def value({y, x}, data), do: data[y][x] |> Nx.to_scalar()
end

Nx.shape(data)
```

## Part 1 - Low Points

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
{rows, cols} = Nx.shape(data)
{maxy, maxx} = {rows - 1, cols - 1}

for y <- 0..maxy,
    x <- 0..maxx,
    p = {y, x},
    v = THelper.value(p, data),
    reduce: 0 do
  acc ->
    THelper.neighbors(p, data)
    |> Enum.all?(&(THelper.value(&1, data) > v))
    |> then(&(acc + ((&1 && v + 1) || 0)))
end
```

## Part 2 - Basins

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Basins do
  def find(data) do
    {rows, cols} = Nx.shape(data)
    {maxy, maxx} = {rows - 1, cols - 1}

    basins(data, {0, 0}, [], MapSet.new(), maxy, maxx)
  end

  defp basins(_data, {y, _x}, acc, _visited, maxy, _maxx) when y > maxy, do: acc

  defp basins(data, {y, maxx}, acc, visited, maxy, maxx) do
    basins(data, {y + 1, 0}, acc, visited, maxy, maxx)
  end

  defp basins(data, {y, x} = p, acc, visited, maxy, maxx) do
    {basin, visited} =
      spider(
        data,
        p,
        THelper.value(p, data),
        MapSet.member?(visited, p),
        MapSet.new(),
        MapSet.put(visited, p)
      )

    basins(data, {y, x + 1}, [basin | acc], visited, maxy, maxx)
  end

  defp spider(_data, _p, _val, true = _visited?, basin, visited),
    do: {basin, visited}

  defp spider(_data, _p, too_big, false = _visited?, basin, visited) when too_big > 8,
    do: {basin, visited}

  defp spider(data, p, _val, false = _visited?, basin, visited) do
    Enum.reduce(
      THelper.neighbors(p, data),
      {MapSet.put(basin, p), visited},
      fn neighbor, {basin, visited} ->
        spider(
          data,
          neighbor,
          THelper.value(neighbor, data),
          MapSet.member?(visited, neighbor),
          basin,
          MapSet.put(visited, neighbor)
        )
      end
    )
  end
end

Basins.find(data)
|> Enum.filter(&Enum.any?/1)
|> Enum.map(&Enum.count/1)
|> Enum.sort(:desc)
|> Enum.take(3)
|> Enum.product()
```
