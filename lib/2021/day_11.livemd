<!-- vim: syntax=markdown -->

# Advent of Code 2021-11

## --- Day 11: Dumbo Octopus ---

Problem Link: https://adventofcode.com/2021/day/11

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"},
  {:vega_lite, "~> 0.1.2"},
  {:nx, github: "elixir-nx/nx", sparse: "nx"}
])
```

```elixir
alias VegaLite, as: Vl
```

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
lines =
  input
  |> Kino.Input.read()
  |> String.split("\n", trim: true)

grid =
  lines
  |> Enum.map(&String.to_charlist/1)
  |> Nx.tensor()
  |> Nx.subtract(?0)

{rows, cols} = Nx.shape(grid)
```

```elixir
defmodule FlashGrid do
  @neighbor_mask Nx.tensor([[1, 1, 1], [1, 0, 1], [1, 1, 1]])

  def flashes(grid, steps) do
    for _step <- 1..steps, reduce: {grid, 0} do
      {grid, flash_count} ->
        stepped = step(grid)
        new_flashes = stepped |> Nx.logical_not() |> Nx.sum() |> Nx.to_number()
        {stepped, flash_count + new_flashes}
    end
  end

  def step(grid) do
    stepped = Nx.add(grid, 1)
    boost(stepped, flashers(stepped), Nx.broadcast(0, Nx.shape(grid)))
  end

  def boost(grid, flashers, flashers), do: grid |> Nx.multiply(Nx.logical_not(flashers))

  def boost(grid, current_flashers, last_flashers) do
    padded = Nx.pad(grid, 0, [{1, 1, 0}, {1, 1, 0}])
    zeroes = Nx.broadcast(0, Nx.shape(padded))
    {rows, cols} = Nx.shape(grid)
    new_flashers = Nx.logical_xor(current_flashers, last_flashers)

    boosts =
      for x <- 1..cols, y <- 1..rows, reduce: zeroes do
        acc ->
          if new_flashers[y - 1][x - 1] |> Nx.to_number() == 1 do
            zeroes
            |> Nx.put_slice([y - 1, x - 1], @neighbor_mask)
            |> Nx.add(acc)
          else
            acc
          end
      end
      |> Nx.slice([1, 1], [rows, cols])

    boosted = Nx.add(grid, boosts)
    next_flashers = flashers(boosted)
    boost(boosted, next_flashers, Nx.logical_or(new_flashers, last_flashers))
  end

  defp flashers(grid), do: Nx.greater(grid, 9)
end
```

## Part 1

```elixir
grid
|> FlashGrid.flashes(100)
|> elem(1)
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
all_flashed = Nx.broadcast(0, Nx.shape(grid))

grid
|> Stream.iterate(&FlashGrid.step/1)
|> Stream.with_index()
|> Enum.find(fn {step, _} -> step == all_flashed end)
```
