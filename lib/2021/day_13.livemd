<!-- vim: syntax=markdown -->

# Advent of Code 2021-13

## --- Day 13: Transparent Origami ---

Problem Link: https://adventofcode.com/2021/day/13

## Setup

```elixir
Mix.install([
  {:kino, "~> 0.4.1"},
  {:vega_lite, "~> 0.1.2"},
  {:nx, github: "elixir-nx/nx", sparse: "nx"}
])
```

```elixir
alias VegaLite, as: Vl
```

```elixir
input = Kino.Input.textarea("Please paste your input file:")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
lines =
  input
  |> Kino.Input.read()
  |> String.split(["\n"], trim: true)

{dots, folds} = lines |> Enum.split_while(&String.contains?(&1, ","))

dots =
  dots
  |> Enum.map(&(String.split(&1, ",") |> Enum.map(fn n -> String.to_integer(n) end)))
  |> MapSet.new()

folds =
  folds
  |> Enum.map(fn "fold along " <> fold -> String.split(fold, "=") end)
  |> Enum.map(fn [axis, n] -> [String.to_atom(axis), String.to_integer(n)] end)
```

```elixir
defmodule Folds do
  def fold(points, folds) do
    for [axis, location] <- folds, reduce: points do
      points ->
        points
        |> fold_once(axis, location)
    end
  end

  def fold_once(points, axis, location) do
    for point <- points, into: MapSet.new() do
      folder(point, axis, location)
    end
  end

  def folder([x, y], :x, fold_line), do: [fold_line - abs(x - fold_line), y]
  def folder([x, y], :y, fold_line), do: [x, fold_line - abs(y - fold_line)]

  def print(points) do
    {[cols, _], [_, rows]} =
      {Enum.max_by(points, fn [x, _] -> x end), Enum.max_by(points, fn [_, y] -> y end)}

    for y <- 0..rows do
      for x <- 0..cols do
        if [x, y] in points, do: IO.write(" # "), else: IO.write("   ")
      end

      IO.write("\n")
    end

    :ok
  end
end
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
dots
|> Folds.fold(Enum.take(folds, 1))
|> MapSet.size()
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
dots
|> Folds.fold(folds)
|> Folds.print()
```
